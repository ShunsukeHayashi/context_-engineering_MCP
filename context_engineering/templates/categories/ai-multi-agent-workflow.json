{
  "id": "ai-multi-agent-workflow-001",
  "name": "マルチエージェントワークフロー設計",
  "description": "AutoGenフレームワークを使用したマルチエージェント会話システムの設計・実装用テンプレート",
  "template": "# マルチエージェントワークフロー設計\n\n## プロジェクト定義\n\n```yaml\nproject:\n  name: \"{project_name}\"\n  description: \"{project_description}\"\n  finalGoal: \"{final_goal}\"\n  userIntent: \"{user_intent}\"\n  \n  structure:\n    - index: 1\n      process: \"{process_1}\"\n      step: \"{step_1}\"\n      task: \"{task_1}\"\n      subTask: \"{subtask_1}\"\n      work: \"{work_1}\"\n      inputIndex: \"{input_index_1}\"\n      input: \"{input_1}\"\n      promptIndex: \"{prompt_index_1}\"\n      prompt: \"{prompt_1}\"\n      outputIndex: \"{output_index_1}\"\n      output: \"{output_1}\"\n      dependencies: \"{dependencies_1}\"\n      status: \"{status_1}\"\n      processingTime: \"{processing_time_1}\"\n    \n    - index: 2\n      process: \"{process_2}\"\n      step: \"{step_2}\"\n      task: \"{task_2}\"\n      subTask: \"{subtask_2}\"\n      work: \"{work_2}\"\n      inputIndex: \"{input_index_2}\"\n      input: \"{input_2}\"\n      promptIndex: \"{prompt_index_2}\"\n      prompt: \"{prompt_2}\"\n      outputIndex: \"{output_index_2}\"\n      output: \"{output_2}\"\n      dependencies: \"{dependencies_2}\"\n      status: \"{status_2}\"\n      processingTime: \"{processing_time_2}\"\n\n  guidelines:\n    - ensureMECE: \"MECE原則に基づく目標指向のアクションとタスク\"\n    - clarityInActionContent: \"アクションは明確で理解しやすいものであること\"\n    - interactiveConfirmation: \"対話を通じた即座のクエリと完了\"\n    - relationshipAwareness: \"チェックリスト内のアクション間の関係を考慮\"\n  \n  feedbackLoop: \"ユーザーフィードバックに基づく継続的改善\"\n  exceptionHandling: \"予期しない問題への柔軟な対応\"\n```\n\n## エージェント定義\n\n### 1. プロジェクトマネージャーエージェント\n\n```python\nimport os\nfrom autogen import ConversableAgent\n\nproject_manager = ConversableAgent(\n    \"ProjectManager\",\n    system_message=\"\"\"あなたは経験豊富なプロジェクトマネージャーです。\n    \n    責任:\n    - プロジェクト全体の進行管理\n    - タスクの優先順位付けと割り当て\n    - 品質保証とリスク管理\n    - ステークホルダーとのコミュニケーション\n    \n    作業スタイル:\n    - 構造化されたアプローチを採用\n    - データドリブンな意思決定\n    - チームメンバーとの協調的な作業\n    - 成果物の品質に責任を持つ\n    \n    コミュニケーション:\n    - 明確で簡潔な指示を出す\n    - 進捗状況を定期的に報告\n    - 問題が発生した場合は即座にエスカレーション\"\"\",\n    llm_config={\"config_list\": [{\"model\": \"gpt-4o\", \"temperature\": 0.3, \"api_key\": os.environ.get(\"OPENAI_API_KEY\")}]},\n    human_input_mode=\"NEVER\"\n)\n```\n\n### 2. 専門家エージェント\n\n```python\n{specialist_agent_name} = ConversableAgent(\n    \"{specialist_agent_name}\",\n    system_message=\"\"\"あなたは{specialist_domain}の専門家です。\n    \n    専門領域:\n    - {expertise_area_1}\n    - {expertise_area_2}\n    - {expertise_area_3}\n    \n    提供サービス:\n    - {service_1}\n    - {service_2}\n    - {service_3}\n    \n    作業方針:\n    - {work_principle_1}\n    - {work_principle_2}\n    - {work_principle_3}\n    \n    出力形式:\n    - 技術的精度を重視\n    - 実装可能な具体的提案\n    - 根拠とリファレンスを含む\"\"\",\n    llm_config={{\"config_list\": [{{\"model\": \"gpt-4o\", \"temperature\": {specialist_temperature}, \"api_key\": os.environ.get(\"OPENAI_API_KEY\")}}]}},\n    human_input_mode=\"NEVER\"\n)\n```\n\n### 3. ユーザープロキシエージェント\n\n```python\nfrom autogen.coding import DockerCommandLineCodeExecutor\n\ncode_executor = DockerCommandLineCodeExecutor()\n\nuser_proxy = ConversableAgent(\n    \"UserProxy\",\n    system_message=\"\"\"あなたはユーザーの代理人として行動します。\n    \n    役割:\n    - ユーザーの意図を正確に理解し伝達\n    - コード実行とテスト\n    - 品質チェックと承認\n    - 最終成果物の検証\n    \n    判断基準:\n    - ユーザー要件との適合性\n    - 実用性と実装可能性\n    - コストパフォーマンス\n    - 保守性と拡張性\"\"\",\n    llm_config={{\"config_list\": [{{\"model\": \"gpt-4o\", \"temperature\": 0.1, \"api_key\": os.environ.get(\"OPENAI_API_KEY\")}}]}},\n    human_input_mode=\"{user_proxy_input_mode}\",\n    code_execution_config={{\"executor\": code_executor}}\n)\n```\n\n### 4. 品質保証エージェント\n\n```python\nqa_agent = ConversableAgent(\n    \"QualityAssurance\",\n    system_message=\"\"\"あなたは品質保証の専門家です。\n    \n    検証項目:\n    - 機能要件の充足性\n    - 非機能要件の適合性\n    - セキュリティとパフォーマンス\n    - ユーザビリティと保守性\n    \n    検証方法:\n    - {qa_method_1}\n    - {qa_method_2}\n    - {qa_method_3}\n    \n    報告形式:\n    - 構造化された品質レポート\n    - 問題の重要度分類\n    - 改善提案と修正方針\"\"\",\n    llm_config={{\"config_list\": [{{\"model\": \"gpt-4o\", \"temperature\": 0.2, \"api_key\": os.environ.get(\"OPENAI_API_KEY\")}}]}},\n    human_input_mode=\"NEVER\"\n)\n```\n\n## ワークフロー実行\n\n### フェーズ1: プロジェクト初期化\n\n```python\n# プロジェクト開始\nuser_proxy.initiate_chat(\n    project_manager,\n    message=\"\"\"プロジェクト開始: {project_name}\n    \n    ユーザー要求:\n    {user_intent}\n    \n    期待成果物:\n    {expected_deliverable}\n    \n    制約条件:\n    - 予算: {budget_constraint}\n    - 期限: {deadline_constraint}\n    - 技術制約: {technical_constraint}\n    \n    このプロジェクトの実行計画を策定し、必要なエージェントとの協議を開始してください。\"\"\"\n)\n```\n\n### フェーズ2: 専門家協議\n\n```python\n# 専門家との協議\nproject_manager.initiate_chat(\n    {specialist_agent_name},\n    message=\"\"\"専門家協議要請\n    \n    プロジェクト: {project_name}\n    担当領域: {specialist_domain}\n    \n    協議事項:\n    - {consultation_topic_1}\n    - {consultation_topic_2}\n    - {consultation_topic_3}\n    \n    求める成果:\n    - 技術的実現可能性の評価\n    - 推奨アーキテクチャの提案\n    - 実装ガイドラインの策定\n    - リスク評価と対策案\"\"\"\n)\n```\n\n### フェーズ3: 実装・検証\n\n```python\n# 実装フェーズ\n{specialist_agent_name}.initiate_chat(\n    user_proxy,\n    message=\"\"\"実装開始\n    \n    実装内容:\n    {implementation_content}\n    \n    技術仕様:\n    {technical_specifications}\n    \n    品質基準:\n    {quality_standards}\n    \n    コードの実装とテストを実行してください。\"\"\"\n)\n\n# 品質検証\nuser_proxy.initiate_chat(\n    qa_agent,\n    message=\"\"\"品質検証要請\n    \n    検証対象: {verification_target}\n    実装内容: {implementation_details}\n    \n    以下の観点から品質評価を実施してください：\n    - 機能適合性\n    - パフォーマンス\n    - セキュリティ\n    - 保守性\"\"\"\n)\n```\n\n## 成果物テンプレート\n\n### 最終デリバラブル\n\n```markdown\n# {project_name} - 最終成果物\n\n## プロジェクト概要\n- **目的**: {final_goal}\n- **成果**: {achieved_results}\n- **品質スコア**: {quality_score}/100\n\n## 実装詳細\n\n### アーキテクチャ\n{architecture_description}\n\n### 主要機能\n1. {feature_1}: {feature_1_description}\n2. {feature_2}: {feature_2_description}\n3. {feature_3}: {feature_3_description}\n\n### 技術仕様\n- **言語/フレームワーク**: {tech_stack}\n- **依存関係**: {dependencies}\n- **システム要件**: {system_requirements}\n\n## 品質保証結果\n\n### テスト結果\n- **単体テスト**: {unit_test_results}\n- **統合テスト**: {integration_test_results} \n- **性能テスト**: {performance_test_results}\n\n### 品質メトリクス\n- **コードカバレッジ**: {code_coverage}%\n- **品質スコア**: {quality_metrics}\n- **セキュリティ評価**: {security_assessment}\n\n## 運用ガイド\n\n### デプロイメント\n{deployment_instructions}\n\n### 保守・拡張\n{maintenance_guidelines}\n\n## プロジェクト総評\n\n### 成功要因\n- {success_factor_1}\n- {success_factor_2}\n- {success_factor_3}\n\n### 学習事項\n- {lesson_learned_1}\n- {lesson_learned_2}\n- {lesson_learned_3}\n\n### 次のステップ\n{next_steps}\n```\n\n## エージェント連携図\n\n```mermaid\ngraph TD\n    A[UserProxy] -->|プロジェクト開始| B[ProjectManager]\n    B -->|専門知識要求| C[{specialist_agent_name}]\n    B -->|品質検証要求| D[QA Agent]\n    C -->|実装提案| A\n    A -->|コード実行・テスト| C\n    C -->|成果物| D\n    D -->|品質レポート| B\n    B -->|最終承認| A\n    \n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#fff3e0\n    style D fill:#e8f5e8\n```\n\n## 実行ログテンプレート\n\n```yaml\nexecution_log:\n  project_id: \"{project_id}\"\n  start_time: \"{start_timestamp}\"\n  end_time: \"{end_timestamp}\"\n  \n  agents_involved:\n    - name: \"ProjectManager\"\n      messages_sent: {pm_messages_sent}\n      messages_received: {pm_messages_received}\n    - name: \"{specialist_agent_name}\"\n      messages_sent: {specialist_messages_sent}\n      messages_received: {specialist_messages_received}\n    - name: \"UserProxy\"\n      messages_sent: {proxy_messages_sent}\n      messages_received: {proxy_messages_received}\n    - name: \"QualityAssurance\"\n      messages_sent: {qa_messages_sent}\n      messages_received: {qa_messages_received}\n  \n  milestones:\n    - milestone: \"プロジェクト初期化\"\n      timestamp: \"{milestone_1_timestamp}\"\n      status: \"{milestone_1_status}\"\n    - milestone: \"専門家協議完了\"\n      timestamp: \"{milestone_2_timestamp}\"\n      status: \"{milestone_2_status}\"\n    - milestone: \"実装完了\"\n      timestamp: \"{milestone_3_timestamp}\"\n      status: \"{milestone_3_status}\"\n    - milestone: \"品質検証完了\"\n      timestamp: \"{milestone_4_timestamp}\"\n      status: \"{milestone_4_status}\"\n  \n  final_status: \"{final_project_status}\"\n  deliverables_created: {deliverables_count}\n  total_processing_time: \"{total_time}\"\n```",
  "variables": [
    "project_name",
    "project_description", 
    "final_goal",
    "user_intent",
    "process_1",
    "step_1",
    "task_1",
    "subtask_1",
    "work_1",
    "input_index_1",
    "input_1",
    "prompt_index_1",
    "prompt_1",
    "output_index_1",
    "output_1",
    "dependencies_1",
    "status_1",
    "processing_time_1",
    "process_2",
    "step_2",
    "task_2",
    "subtask_2",
    "work_2",
    "input_index_2",
    "input_2",
    "prompt_index_2",
    "prompt_2",
    "output_index_2",
    "output_2",
    "dependencies_2",
    "status_2",
    "processing_time_2",
    "specialist_agent_name",
    "specialist_domain",
    "expertise_area_1",
    "expertise_area_2",
    "expertise_area_3",
    "service_1",
    "service_2",
    "service_3",
    "work_principle_1",
    "work_principle_2",
    "work_principle_3",
    "specialist_temperature",
    "user_proxy_input_mode",
    "qa_method_1",
    "qa_method_2",
    "qa_method_3",
    "expected_deliverable",
    "budget_constraint",
    "deadline_constraint",
    "technical_constraint",
    "consultation_topic_1",
    "consultation_topic_2",
    "consultation_topic_3",
    "implementation_content",
    "technical_specifications",
    "quality_standards",
    "verification_target",
    "implementation_details",
    "achieved_results",
    "quality_score",
    "architecture_description",
    "feature_1",
    "feature_1_description",
    "feature_2",
    "feature_2_description",
    "feature_3",
    "feature_3_description",
    "tech_stack",
    "dependencies",
    "system_requirements",
    "unit_test_results",
    "integration_test_results",
    "performance_test_results",
    "code_coverage",
    "quality_metrics",
    "security_assessment",
    "deployment_instructions",
    "maintenance_guidelines",
    "success_factor_1",
    "success_factor_2",
    "success_factor_3",
    "lesson_learned_1",
    "lesson_learned_2",
    "lesson_learned_3",
    "next_steps",
    "project_id",
    "start_timestamp",
    "end_timestamp",
    "pm_messages_sent",
    "pm_messages_received",
    "specialist_messages_sent",
    "specialist_messages_received",
    "proxy_messages_sent",
    "proxy_messages_received",
    "qa_messages_sent",
    "qa_messages_received",
    "milestone_1_timestamp",
    "milestone_1_status",
    "milestone_2_timestamp",
    "milestone_2_status",
    "milestone_3_timestamp",
    "milestone_3_status",
    "milestone_4_timestamp",
    "milestone_4_status",
    "final_project_status",
    "deliverables_count",
    "total_time"
  ],
  "type": "completion",
  "category": "ai-agents",
  "tags": ["multi-agent", "autogen", "workflow", "project-management", "ai-automation"],
  "usage_count": 0,
  "quality_score": 97.0,
  "created_by": "system",
  "created_at": "2025-07-26T00:00:00.000000",
  "updated_at": "2025-07-26T00:00:00.000000",
  "metadata": {
    "industry": "technology",
    "skill_level": "expert",
    "estimated_tokens": 1200,
    "languages": ["ja", "en"],
    "use_cases": ["ai_agent_development", "project_automation", "workflow_orchestration", "team_collaboration"],
    "optimization_goals": ["automation", "collaboration", "quality_assurance"],
    "complexity": "high",
    "framework": "autogen"
  }
}