[tool:pytest]
# Pytest configuration for Context Engineering MCP Platform

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=context_engineering
    --cov=gemini_service
    --cov=main
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10

# Async support
asyncio_mode = auto

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for API endpoints
    e2e: End-to-end tests for complete workflows
    slow: Tests that take a long time to run
    performance: Performance benchmark tests
    security: Security-related tests
    api: API endpoint tests
    ai: Tests involving AI/ML components
    template: Template system tests
    optimization: Context optimization tests
    multimodal: Multi-modal context tests
    rag: RAG (Retrieval-Augmented Generation) tests
    mcp: MCP server tests
    workflow: Workflow system tests

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# addopts = --numprocesses=auto  # Uncomment for parallel execution

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Environment variables for testing
env =
    NODE_ENV = test
    LOG_LEVEL = debug
    GEMINI_API_KEY = test_api_key_12345
    PYTHONPATH = .

# Test output
console_output_style = progress
junit_family = xunit2